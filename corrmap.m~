function map = corrmap(data,sel,show)
    % [] = CORRMAP(data,sel,show)
    % data - given struct array 
    % sel - struct with fields:
        %.trial - range or single trial value
        %.angle - single angle value
        %.unit - single unit value
    % show - boolean argument: 
        % true - computes cross-correlation heatmap between neuronal unit
        % and other units
        % false - does not compute/disply heatmap
        
     % Average over trials selected
     mean_spikes = data(sel.trial(1), sel.angle).spikes; % initial data at first trial
     for i = 2:length(sel.trial)
         new_spikes = data(sel.trial(i), sel.angle).spikes;
         mean_shape = size(mean_spikes); new_data_shape = size(new_spikes);
         % If some trials are longer, add zero padding to compute mean
         if mean_shape(2) > new_data_shape(2)
             new_spikes = [new_spikes zeros(98, mean_shape(2) - new_data_shape(2))];
         elseif mean_shape(2) < new_data_shape(2)
             mean_spikes = [mean_spikes zeros(98, new_data_shape(2) - mean_shape(2))];
         end
         mean_spikes = mean_spikes + new_spikes; % sum over all of them first
     end
     mean_spikes = mean_spikes/length(sel.trial);
     
     % Compute the cross-correlation map between neuronal units
     map = [];
     for i = 1:98
         map = [map; xcorr(mean_spikes(sel.unit, :), mean_spikes(i, :))];
     end
     % If selected, display correlation heatmap
     heatmap(log10(map + min(min)));
%      if show
%         T = array2table(map, 'VariableNames',{-length(mean_spikes)+1:length(mean_spikes)-1}); % create a table variable
%      end
end